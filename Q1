%Luís Antônio Andrade de Albuquerque - 557472
%Caio de Araujo Macêdo - 555543
%1.1
{Browse 9999*9999}

%1.2
declare
V=9999*9999
{Browse V*V}

%1.3
{Browse 1*2*3*4*5*6*7*8*9*10}

declare
fun {Fact N}
   if N==0 then 1 else N*{Fact N-1} end
end

declare
fun {Comb N K}
   {Fact N} div ({Fact K}*{Fact N-K})
end

{Browse {Comb 10 3}}
{Browse {Fact 100}}
{Browse {Fact 10}}

%1.4
{Browse [5 6 7 8]}

declare
H=5
T=[6 7 8]
{Browse H|T}

% declare
% L=[5 6 7 8]
% {Browse L.1}
% {Browse L.2}

declare
L=[5 6 7 8]
case L of H|T then {Browse H} {Browse T} end

%1.5
declare Pascal AddList ShiftLeft ShiftRight
fun {Pascal N}
   if N==1 then [1]
   else
      {AddList {ShiftLeft {Pascal N-1}} {ShiftRight {Pascal N-1}}}
   end
end

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0] end
end

fun {ShiftRight L} 0|L end

fun {AddList L1 L2}
   case L1 of H1|T1 then
      case L2 of H2|T2 then
	 H1+H2|{AddList T1 T2}
      end
   else nil end
end

{Browse {Pascal 3}}

%1.7
fun {FastPascal N}
   if N==1 then [1]
   else L in
      L={FastPascal N-1}
      {AddList {ShiftLeft L} {ShiftRight L}}
   end
end

{Browse {FastPascal 30}}

%1.8
declare
fun lazy {Ints N}
   N|{Ints N+1}
end


L={Ints 0}
{Browse L.1}

%Não consegui entender a implementação e a lógica por trás das lazy functions

%1.9
declare Generic Pascal OpList ShiftLeft ShiftRight Add Xor
fun {GenericPascal Op N}
   if N==1 then [1]
   else L in
      L={GenericPascal Op N-1}
      {OpList Op {ShiftLeft L} {ShiftRight L}}
   end
end

fun {OpList Op L1 L2}
   case L1 of H1|T1 then
      case L2 of H2|T2 then
	 {Op H1 H2}|{OpList Op T1 T2}
      end
   else nil end
end

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0] end
end

fun {ShiftRight L} 0|L end

fun {Add X Y} X+Y end

fun {Xor X Y} if X==Y then 0 else 1 end end

{Browse{GenericPascal Xor 5}}

{Browse{GenericPascal Add 5}}

%1.10

declare Pascal AddList ShiftLeft ShiftRight
fun {Pascal N}
   if N==1 then [1]
   else
      {AddList {ShiftLeft {Pascal N-1}} {ShiftRight {Pascal N-1}}}
   end
end

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0] end
end

fun {ShiftRight L} 0|L end

fun {AddList L1 L2}
   case L1 of H1|T1 then
      case L2 of H2|T2 then
	 H1+H2|{AddList T1 T2}
      end
   else nil end
end

thread P in
   P={Pascal 20}
   {Browse P}
end

{Browse 99*99}

%1.11

declare X in
thread {Delay 10000} X=99 end
{Browse start} {Browse X*X}

declare X in
thread {Browse start} {Browse X*X} end
{Delay 10000} X=99

%1.12

declare
C={NewCell 0}
C:=@C+1
{Browse @C}

declare Generic Pascal OpList ShiftLeft ShiftRight Add Xor
fun {GenericPascal Op N}
   if N==1 then [1]
   else L in
      L={GenericPascal Op N-1}
      {OpList Op {ShiftLeft L} {ShiftRight L}}
   end
end

fun {OpList Op L1 L2}
   case L1 of H1|T1 then
      case L2 of H2|T2 then
	 {Op H1 H2}|{OpList Op T1 T2}
      end
   else nil end
end

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0] end
end

fun {ShiftRight L} 0|L end

declare
C={NewCell 0}
fun {FastPascal N}
   C:=@C+1
   {GenericPascal Add N}
end

{Browse{FastPascal 5}}


%1.13
declare
local C in
   C={NewCell 0}
   fun {Bump}
      C:=@C+1
      @C
   end
   fun {Read}
      @C
   end
end
{Browse {Bump}}
{Browse {Bump}}

declare
fun {FastPascal N}
   {Browse {Bump}}
   {GenericPascal Add N}
end

%1.14

declare
fun {NewCounter}
   C Bump Read in
   C={NewCell 0}
   fun {Bump}
      C:=@C+1
      @C
   end
   counter(bump:Bump read:Read)
end

declare
Ctr1={NewCounter}
Ctr2={NewCounter}

{Browse {Ctr1.bump}}

%1.15

 

